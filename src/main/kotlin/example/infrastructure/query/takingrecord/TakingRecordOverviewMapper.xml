<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="example.infrastructure.query.takingrecord.TakingRecordOverviewMapper">
    <select id="countByAccountIdsAndMedicineIdsAndRecorderAt" resultType="_long">
        SELECT
            COUNT(*)
        FROM
            <include refid="AllTables"/>
        WHERE
            <include refid="Filtering"/>;
    </select>

    <select id="findAllByAccountIdsAndMedicineIdsAndRecorderAt" resultMap="TakingRecordOverviewResultMap">
        SELECT
            <include refid="AllColumns"/>
        FROM
            <include refid="AllTables"/>
        WHERE
            <include refid="Filtering"/>
        ORDER BY
            taken_at DESC
        LIMIT
            #{pageSize}
        OFFSET
            #{offset};
    </select>

    <sql id="AllColumns">
        taking_records.taking_record_id AS taking_record_id,
        taking_records.recorder AS recorder,
        taking_records.before_taking AS before_taking,
        taking_records.after_taking AS after_taking,
        taking_records.taken_at AS taken_at,
        medicines.medicine_id AS medicine_id,
        medicines.medicine_name AS medicine_name,
        profiles.account_id,
        profiles.username,
        profiles.profile_image_url_endpoint,
        profiles.profile_image_url_path
    </sql>

    <sql id="AllTables">
        taking_records
        LEFT OUTER JOIN medicines ON taking_records.taken_medicine = medicines.medicine_id
        LEFT OUTER JOIN profiles ON taking_records.recorder = profiles.account_id
    </sql>

    <sql id="Filtering">
        <foreach collection="accountIds" item="accountId" open="recorder IN (" separator="," close=")">
              #{accountId}
        </foreach>
        <foreach collection="medicineIds" item="medicineId" open="AND medicine_id IN (" separator="," close=")">
              #{medicineId}
        </foreach>
        <choose>
            <when test="start != null and end == null">
                AND DATE(taken_at) <![CDATA[ >= ]]> #{start}
            </when>
            <when test="start == null and end != null">
                AND DATE(taken_at) <![CDATA[ <= ]]> #{end}
            </when>
            <when test="start != null and end != null">
                AND DATE(taken_at) #{start} between #{end}
            </when>
        </choose>
    </sql>

    <resultMap id="TakingRecordOverviewResultMap" type="example.application.query.takingrecord.TakingRecordOverview">
        <constructor>
            <idArg column="taking_record_id" javaType="TakingRecordId" resultMap="TakingRecordIdResultMap"/>
            <arg column="before_taking" javaType="ConditionLevel"/>
            <arg column="after_taking" javaType="ConditionLevel"/>
            <arg column="taken_at" javaType="java.time.LocalDateTime"/>
            <arg column="medicine_id" javaType="MedicineId" resultMap="MedicineIdResultMap"/>
            <arg column="medicine_name" javaType="MedicineName" resultMap="MedicineNameResultMap"/>
            <arg column="{account_id, username, profile_image_url_endpoint, profile_image_url_path}"
                 javaType="example.application.query.shared.type.User" resultMap="UserResultMap"/>
        </constructor>
    </resultMap>
    <resultMap id="TakingRecordIdResultMap" type="TakingRecordId">
        <constructor>
            <idArg column="taking_record_id" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="MedicineIdResultMap" type="MedicineId">
        <constructor>
            <idArg column="medicine_id" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="MedicineNameResultMap" type="MedicineName">
        <constructor>
            <idArg column="medicine_name" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="UserResultMap" type="example.application.query.shared.type.User">
        <constructor>
            <idArg column="account_id" javaType="AccountId" resultMap="AccountIdResultMap"/>
            <arg column="username" javaType="Username" resultMap="UsernameResultMap"/>
            <arg column="{profile_image_url_endpoint, profile_image_url_path}" javaType="ProfileImageURL" resultMap="ProfileImageURLResultMap"/>
        </constructor>
    </resultMap>
    <resultMap id="AccountIdResultMap" type="AccountId">
        <constructor>
            <idArg column="account_id" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="UsernameResultMap" type="Username">
        <constructor>
            <idArg column="username" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="ProfileImageURLResultMap" type="ProfileImageURL">
        <constructor>
            <idArg column="profile_image_url_endpoint" javaType="String"/>
            <idArg column="profile_image_url_path" javaType="String"/>
        </constructor>
    </resultMap>
</mapper>